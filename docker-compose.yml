
services:

  postgres:
    container_name: postgres
    image: postgres:alpine3.18
    env_file:
      - /src/.env
    networks:
      - main
    ports:
      - 5432:5432
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data


  app:
    build: .
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    container_name: djangorss
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./src/:/src/
    depends_on:
      - postgres
      - rabbit
    ports:
      - 8000:8000
    networks:
      - main
    restart: always


  redis:
    container_name: redis
    image: redis:alpine
    networks:
      - main
    ports:
      - 6379:6379
    restart: always
    volumes:
      - redis_data:/data


  celery:
    restart: always
    build: .
    volumes:
      - ./src/:/src/
    command: celery -A config worker -l INFO
    networks:
      - main
    depends_on:
      - postgres
      - redis
      - app

  celerybeat:
    restart: always
    build: .
    volumes:
      - ./src/:/src/
    command: celery -A config beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    networks:
      - main
    depends_on:
      - celery


  rabbit:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    networks:
      - main
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest


  consumer:
    build: .
    command: python consumers.py
    container_name: consumer
    restart: always
    volumes:
      - ./src/:/src/
    depends_on:
      - app
    networks:
      - main
    environment:
      - PYTHONUNBUFFERED=1


  # esearch:
  #   mem_limit: 512m
  #   image: elasticsearch:7.14.2
  #   ports:
  #     - 9200:9200
  #     - 9300:9300
  #   environment:
  #     discovery.type: 'single-node'
  #     xpack.security.enabled: 'true'
  #     xpack.security.enrollment.enabled: 'true'
  #     ELASTIC_PASSWORD: 'elastic'
  #     ES_JAVA_OPTS: '-Xms256m -Xmx256m'
  #     network.bind_host: 0.0.0.0
  #     network.host: 0.0.0.0
  #   networks:
  #     - main

  # kibana:
  #   mem_limit: 512m
  #   image: kibana:8.10.2
  #   ports:
  #     - 5601:5601
  #   networks:
  #     - main
  #   volumes:
  #     - ./kibana.yml:/usr/share/kibana/config/kibana.yml




networks:
    main:




volumes:
    postgres_data:
    redis_data:
